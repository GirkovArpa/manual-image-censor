const DEBUGGING = true;

DEBUGGING && view.connectToInspector && view.connectToInspector(rootElement, inspectorIpAddress);

$(#about) << event click {
  view.msgbox(#information,
    "This application was written by GirkovArpa.\nIt uses Sciter Engine (https://sciter.com),\ncopyright Â© Terra Informatica Software, Inc.",
    "About"
  );
}

$(#instructions) << event click {
  view.msgbox(#information,
    "Click & drag to censor.  Scroll the mouse wheel to advance to another image.",
    "Instructions"
  );
}

include "modulus.tis";

var filenames = [];
var index = -1;

$(#open-folder) << event click {
  const home = System.home();
  const folder = view.selectFolder("Select a folder containing images", home);
  if (! folder) return;
  $(#prev).state#disabled = false;
  $(#next).state#disabled = false;
  const filter = "/**.jpg";
  filenames = [];
  index = -1;
  const result = System.scanFiles(folder + filter, function(filename, attributes) {
    filenames.push(folder + "/" + filename);
    return true;
  });
  $(img).@#src = filenames[++index];
  $(img).refresh();
}

$(#next) << event click {
  $(img).@#src = filenames[++index % filenames.length];
  rectangles = [];
  $(img).refresh();
}

$(#prev) << event click {
  index = mod(index - 1, filenames.length);
  $(img).@#src = filenames[index];
  rectangles = [];
  $(img).refresh();
}

var rectangles = [];

$(img).paintOutline = function(gfx) {
  gfx.fillColor(color(0, 0, 0));
  for (var rectangle in rectangles) {
    gfx.rectangle(...rectangle);
  }
}

var dragging = false;

$(img) << event mousedown (evt) {
  const x = evt.x.toFloat();
  const y = evt.y.toFloat();
  rectangles.push([x, y, x, y]);
  dragging = true;
}

$(img) << event mousemove (evt) {
  if (! dragging) return;
  const rect = rectangles.last;
  rect[2] = evt.x.toFloat() - rect[0];
  rect[3] = evt.y.toFloat() - rect[1];
  this.refresh();
}

function save() {

  const fileDims = {
    width: $(img).style.foregroundImageWidth,
    height: $(img).style.foregroundImageHeight
  };
  debug info: fileDims;

  const (w, h) = $(img).box(#dimension);
  const canvasDims = {
    width: w,
    height: h
  };
  debug info: canvasDims;

  const ratio = fileDims.width.toFloat() / fileDims.height.toFloat();


  const displayedDims = { width: undefined, height: undefined };
  if (canvasDims.height < canvasDims.width) {
    displayedDims.height = canvasDims.height;
    displayedDims.width = ratio * canvasDims.height.toFloat();
  } else {
    displayedDims.width = canvasDims.width;
    displayedDims.height = ratio * canvasDims.width.toFloat();
  }
  debug info: displayedDims;

  const originalImage = Image.fromBytes(Bytes.load($(img).@#src));
  const newImage  = new Image(fileDims.width, fileDims.height, function(gfx) {
    gfx
      .drawImage(originalImage, 0.0, 0.0)
      .fillColor(color(0, 0, 0));

    for (var rectangle in rectangles) {
      const ratio = fileDims.height.toFloat() / displayedDims.height.toFloat();
      debug info: ratio;

      const spaceLeft = ((canvasDims.width - displayedDims.width) / 2.0) * ratio;
      const spaceTop = ((canvasDims.height - displayedDims.height) / 2.0) * ratio;
      debug info: space;

      const correctedRect = [
        ratio * rectangle[0] - spaceLeft,
        ratio * rectangle[1] - spaceTop,
        ratio * rectangle[2],
        ratio * rectangle[3]
      ];

      debug info: rectangle;
      debug info: correctedRect;

      gfx.rectangle(...correctedRect);
    }
  }); 
  newImage.toBytes().save("z.png");
}

$(#undo) << event click {
  if (rectangles.length) rectangles.length--;
  save();
  return true;
}

$(img) << event mouseleave (evt) {
  if (! dragging) return;
  dragging = false;
  save();
}

$(img) << event mouseup (evt) {
  if (! dragging) return;
  dragging = false;
  save();
}

self.onMouse = function(evt) {
  if (evt.type == Event.MOUSE_WHEEL) {
    const delta = evt.wheelDelta;
    if (delta == -1.0 || delta == 1.0)  {
      index = mod(index + delta.toInteger(), filenames.length);
      $(img).@#src = filenames[index];
      rectangles = [];
      $(img).refresh();
      return true;
    }
  }
}
